// This file is auto-generated by @hey-api/openapi-ts

import type { ListCasesResponse, ListEpisodesResponse, ListOpinionsResponse, ReadCaseResponse, ReadEpisodeResponse, ReadOpinionResponse } from './types.gen';

const episodeItemSchemaResponseTransformer = (data: any) => {
    data.pub_date = new Date(data.pub_date);
    return data;
};

const paginatedBaseEpisodeItemSchemaResponseTransformer = (data: any) => {
    data.items = data.items.map((item: any) => {
        return episodeItemSchemaResponseTransformer(item);
    });
    return data;
};

export const listEpisodesResponseTransformer = async (data: any): Promise<ListEpisodesResponse> => {
    data = paginatedBaseEpisodeItemSchemaResponseTransformer(data);
    return data;
};

const caseItemSchemaResponseTransformer = (data: any) => {
    data.episode = episodeItemSchemaResponseTransformer(data.episode);
    return data;
};

const episodeReadSchemaResponseTransformer = (data: any) => {
    data.pub_date = new Date(data.pub_date);
    data.fantasy_court_cases = data.fantasy_court_cases.map((item: any) => {
        return caseItemSchemaResponseTransformer(item);
    });
    return data;
};

export const readEpisodeResponseTransformer = async (data: any): Promise<ReadEpisodeResponse> => {
    data = episodeReadSchemaResponseTransformer(data);
    return data;
};

const paginatedBaseCaseItemSchemaResponseTransformer = (data: any) => {
    data.items = data.items.map((item: any) => {
        return caseItemSchemaResponseTransformer(item);
    });
    return data;
};

export const listCasesResponseTransformer = async (data: any): Promise<ListCasesResponse> => {
    data = paginatedBaseCaseItemSchemaResponseTransformer(data);
    return data;
};

const opinionItemOutputSchemaResponseTransformer = (data: any) => {
    data.case = caseItemSchemaResponseTransformer(data.case);
    return data;
};

const caseReadSchemaResponseTransformer = (data: any) => {
    data.episode = episodeItemSchemaResponseTransformer(data.episode);
    if (data.opinion) {
        data.opinion = opinionItemOutputSchemaResponseTransformer(data.opinion);
    }
    return data;
};

export const readCaseResponseTransformer = async (data: any): Promise<ReadCaseResponse> => {
    data = caseReadSchemaResponseTransformer(data);
    return data;
};

const paginatedBaseOpinionItemSchemaResponseTransformer = (data: any) => {
    data.items = data.items.map((item: any) => {
        return opinionItemOutputSchemaResponseTransformer(item);
    });
    return data;
};

export const listOpinionsResponseTransformer = async (data: any): Promise<ListOpinionsResponse> => {
    data = paginatedBaseOpinionItemSchemaResponseTransformer(data);
    return data;
};

const opinionReadSchemaResponseTransformer = (data: any) => {
    data.case = caseReadSchemaResponseTransformer(data.case);
    return data;
};

export const readOpinionResponseTransformer = async (data: any): Promise<ReadOpinionResponse> => {
    data = opinionReadSchemaResponseTransformer(data);
    return data;
};
