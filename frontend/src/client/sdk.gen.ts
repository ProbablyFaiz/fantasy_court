// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from '@hey-api/client-axios';
import { client as _heyApiClient } from './client.gen';
import { listCasesResponseTransformer, listEpisodesResponseTransformer, listOpinionsResponseTransformer, readCaseResponseTransformer, readEpisodeResponseTransformer, readOpinionResponseTransformer } from './transformers.gen';
import type { ErrorErrorGetData, ErrorErrorGetResponses, HealthHealthGetData, HealthHealthGetResponses, ListCasesData, ListCasesErrors, ListCasesResponses, ListEpisodesData, ListEpisodesErrors, ListEpisodesResponses, ListOpinionsData, ListOpinionsErrors, ListOpinionsResponses, ReadCaseData, ReadCaseErrors, ReadCaseResponses, ReadEpisodeData, ReadEpisodeErrors, ReadEpisodeResponses, ReadOpinionData, ReadOpinionErrors, ReadOpinionHtmlData, ReadOpinionHtmlErrors, ReadOpinionHtmlResponses, ReadOpinionResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Default {
    /**
     * Health
     */
    public static healthHealthGet<ThrowOnError extends boolean = false>(options?: Options<HealthHealthGetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<HealthHealthGetResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/health',
            ...options
        });
    }

    /**
     * Error
     */
    public static errorErrorGet<ThrowOnError extends boolean = false>(options?: Options<ErrorErrorGetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ErrorErrorGetResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/error',
            ...options
        });
    }

    /**
     * List Episodes
     */
    public static listEpisodes<ThrowOnError extends boolean = false>(options?: Options<ListEpisodesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ListEpisodesResponses, ListEpisodesErrors, ThrowOnError>({
            responseType: 'json',
            responseTransformer: listEpisodesResponseTransformer,
            url: '/episodes',
            ...options
        });
    }

    /**
     * Read Episode
     */
    public static readEpisode<ThrowOnError extends boolean = false>(options: Options<ReadEpisodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ReadEpisodeResponses, ReadEpisodeErrors, ThrowOnError>({
            responseType: 'json',
            responseTransformer: readEpisodeResponseTransformer,
            url: '/episodes/{episode_id}',
            ...options
        });
    }

    /**
     * List Cases
     */
    public static listCases<ThrowOnError extends boolean = false>(options?: Options<ListCasesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ListCasesResponses, ListCasesErrors, ThrowOnError>({
            responseType: 'json',
            responseTransformer: listCasesResponseTransformer,
            url: '/cases',
            ...options
        });
    }

    /**
     * Read Case
     */
    public static readCase<ThrowOnError extends boolean = false>(options: Options<ReadCaseData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ReadCaseResponses, ReadCaseErrors, ThrowOnError>({
            responseType: 'json',
            responseTransformer: readCaseResponseTransformer,
            url: '/cases/{case_id}',
            ...options
        });
    }

    /**
     * List Opinions
     */
    public static listOpinions<ThrowOnError extends boolean = false>(options?: Options<ListOpinionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ListOpinionsResponses, ListOpinionsErrors, ThrowOnError>({
            responseType: 'json',
            responseTransformer: listOpinionsResponseTransformer,
            url: '/opinions',
            ...options
        });
    }

    /**
     * Read Opinion
     */
    public static readOpinion<ThrowOnError extends boolean = false>(options: Options<ReadOpinionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ReadOpinionResponses, ReadOpinionErrors, ThrowOnError>({
            responseType: 'json',
            responseTransformer: readOpinionResponseTransformer,
            url: '/opinions/{opinion_id}',
            ...options
        });
    }

    /**
     * Read Opinion Html
     * Render the opinion as formatted HTML.
     */
    public static readOpinionHtml<ThrowOnError extends boolean = false>(options: Options<ReadOpinionHtmlData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ReadOpinionHtmlResponses, ReadOpinionHtmlErrors, ThrowOnError>({
            responseType: 'text',
            url: '/opinions/{opinion_id}/html',
            ...options
        });
    }
}
